#include <iostream>
using namespace std;

//stuff for a sorting algorithm to sort the array by burst time

void insertionSort(int array[], int array2[], int size)
{

	for (int s = 1; s < size; s++) {
		int key = array[s];
		int key2 = array2[s];

		int i = s - 1;

		while ((key > array[i]) && (i >= 0)) 
		{
			
			array[i + 1] = array[i];
			array2[i + 1] = array2[i];
			--i;
			
		}
		
		array[i + 1] = key;
		array2[i + 1] = key2;
	}
}
void printArray(int arr[], int n)
{
    int i;
    for (i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout <<endl;
}



int main()
{
int nop;//variable for number of processes
	cout << "Enter the number of processes:";
	cin >> nop;
	string pname[nop];// set size so it works, i dont feel like implementing anyhting for dynamic array yet
	int atime[nop], btime[nop], etime[nop], ttime[nop],wtime[nop];
	float avg = 0;

	for (int i = 0; i < nop; i++)
	{
		cout << "Enter arrival time for process p"<<i<<" :";
		cin >> atime[i];
		cout << "Enter burst time for process p" << i << " :";
		cin >> btime[i];
	}

	int n = sizeof(btime) / sizeof(btime[0]);
    insertionSort(btime,atime, n);
    cout << "Sorted array: \n";
    printArray(btime, n);
    
printArray(atime, n);

}